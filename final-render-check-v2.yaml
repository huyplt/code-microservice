---
# Source: microservices-umbrella/charts/order-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-order-service
  labels:
    helm.sh/chart: order-service-0.1.0
    app.kubernetes.io/name: order-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: order-service
    app.kubernetes.io/instance: my-app
---
# Source: microservices-umbrella/charts/product-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-product-service
  labels:
    helm.sh/chart: product-service-0.1.0
    app.kubernetes.io/name: product-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: product-service
    app.kubernetes.io/instance: my-app
---
# Source: microservices-umbrella/charts/user-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-user-service
  labels:
    helm.sh/chart: user-service-0.1.0
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080 # Can also use named port 'http' from deployment
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: my-app
---
# Source: microservices-umbrella/charts/order-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-order-service
  labels:
    helm.sh/chart: order-service-0.1.0
    app.kubernetes.io/name: order-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: order-service
      app.kubernetes.io/instance: my-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: order-service
        app.kubernetes.io/instance: my-app
    spec:
      containers:
        - name: order-service
          image: "asia-southeast1-docker.pkg.dev/microservice-lab-457503/docker-repo/order-service:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
# --- Helper template definitions ---
---
# Source: microservices-umbrella/charts/product-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-product-service
  labels:
    helm.sh/chart: product-service-0.1.0
    app.kubernetes.io/name: product-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: product-service
      app.kubernetes.io/instance: my-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: product-service
        app.kubernetes.io/instance: my-app
    spec:
      containers:
        - name: product-service
          image: "asia-southeast1-docker.pkg.dev/microservice-lab-457503/docker-repo/product-service:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:
              cpu: 150m
              memory: 192Mi
            requests:
              cpu: 75m
              memory: 96Mi
# --- Helper template definitions ---
---
# Source: microservices-umbrella/charts/user-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-user-service
  labels:
    helm.sh/chart: user-service-0.1.0
    app.kubernetes.io/name: user-service
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/version: ""
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: user-service
      app.kubernetes.io/instance: my-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: user-service
        app.kubernetes.io/instance: my-app
    spec:
      containers:
        - name: user-service
          image: "asia-southeast1-docker.pkg.dev/microservice-lab-457503/docker-repo/user-service:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {}
# --- Helper template definitions (usually in _helpers.tpl) ---
# For simplicity, we include minimal versions here.
---
# Source: microservices-umbrella/charts/kong-config/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-kong-ingress
  labels:
    app.kubernetes.io/name: kong-ingress
    app.kubernetes.io/instance: my-app
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: kong
spec:
  ingressClassName: kong
  rules:
  - http:
      paths:
      - path: /orders
        pathType: Prefix # Or ImplementationSpecific if using complex regex with KongIngress
        backend:
          service:
            # Construct the service name based on the release name and the service suffix
            name: my-app-order-service
            port:
              number: 80
      - path: /products
        pathType: Prefix # Or ImplementationSpecific if using complex regex with KongIngress
        backend:
          service:
            # Construct the service name based on the release name and the service suffix
            name: my-app-product-service
            port:
              number: 80
      - path: /users
        pathType: Prefix # Or ImplementationSpecific if using complex regex with KongIngress
        backend:
          service:
            # Construct the service name based on the release name and the service suffix
            name: my-app-user-service
            port:
              number: 80
