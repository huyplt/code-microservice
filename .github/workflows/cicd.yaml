name: Microservices CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting main

env:
  # --- CHANGE THESE ---
  GCP_PROJECT_ID: microservice-lab-457503
  GKE_CLUSTER_NAME: microservice-cluster
  GKE_LOCATION: asia-southeast1 # e.g., us-central1, europe-west1-b
  GAR_LOCATION: asia-southeast1 # e.g., us-central1
  GAR_REPOSITORY: docker-repo # e.g., my-microservices-repo
  DEPLOY_NAMESPACE: production # Target K8s namespace for deployment
  HELM_RELEASE_NAME: prod-app # Helm release name
  DB_PASSWORD_SECRET_MANAGER_ID: "projects/918873503816/secrets/db-app-password"
  # Tên Kubernetes Secret sẽ được tạo để chứa DB password
  DB_PASSWORD_K8S_SECRET_NAME: "db-app-user-password-secret"
  # Tên kết nối instance Cloud SQL (PROJECT:REGION:INSTANCE)
  DB_CONNECTION_NAME: "microservice-lab-457503:asia-southeast1:microservice-cluster-pg-instance"
  # Email của GCP Service Account mà các Pod GKE sẽ mạo danh để truy cập Cloud SQL
  POD_GCP_SA_EMAIL: "microservice-cluster-sqlproxy-sa@microservice-lab-457503.iam.gserviceaccount.com"
  # --- END CHANGES ---

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Match Go version used in Dockerfiles

      # Add linters and tests here if you have them
      # Example:
      # - name: Run Go Vet & Lint
      #   run: |
      #     go install honnef.co/go/tools/cmd/staticcheck@latest
      #     fiprint0 | xargs -0 -I {} dirname {} | sort -u | xargs -I {} sh -c 'cd {}; go vet ./...; staticcheck ./...'

      # - name: Run Unit Tests (if applicable)
      #   run: |
      #     services -print0 | xargs -0 -I {} dirname {} | sort -u | xargs -I {} sh -c 'cd {}; go test ./...'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0' # Specify Helm version

      - name: Lint Helm Charts
        run: |
          helm lint helm/user-service
          helm lint helm/product-service
          helm lint helm/order-service
          helm lint helm/kong-config
          helm dependency build helm/umbrella-chart 
          helm lint helm/umbrella-chart

  build-and-push:
    name: Build & Push Images
    needs: lint-and-test # Run after linting/testing
    runs-on: ubuntu-latest
    # Only run on pushes to main (not on PRs for this job)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: 'read'
      id-token: 'write' # Needed for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud using Workload Identity Federation
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/918873503816/locations/global/workloadIdentityPools/github-pool/providers/github-provider' # Replace with your WIF Pool/Provider
          service_account: 'github-actions-wif-sa@microservice-lab-457503.iam.gserviceaccount.com' # Replace with your SA email

      # Set up gcloud CLI (needed for docker-credential-gcr)
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # Configure Docker to use Artifact Registry credentials
      - name: Configure Docker credentials for GAR
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # Use git sha for image tag for traceability
      - name: Set Image Tag
        id: image_tag
        run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Build and push images using the script
      - name: Build and Push Docker Images
        env:
          # Construct the full GAR path
          IMAGE_REGISTRY: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.image_tag.outputs.tag }}
        run: |
          chmod +x ./scripts/build_push.sh
          ./scripts/build_push.sh "$IMAGE_TAG" # Pass tag to script
        # Override REGISTRY env var used inside build_push.sh
        shell: bash -eo pipefail {0} # Ensure script errors fail the step

      # Store the tag as an artifact for the deploy job
      - name: Create image_tag.txt file  # Đặt tên rõ ràng cho bước này
        run: echo "${{ steps.image_tag.outputs.tag }}" > ${{ github.workspace }}/image_tag.txt
      - name: Verify image_tag.txt creation
        run: |
          echo "Working directory is: $(pwd)" # Kiểm tra thư mục làm việc
          ls -l ${{ github.workspace }}/image_tag.txt
          cat ${{ github.workspace }}/image_tag.txt
      - name: Upload Image Tag Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: ${{ github.workspace }}/image_tag.txt # <-- Sử dụng đường dẫn tuyệt đối
          retention-days: 1
      

  deploy-to-gke:
    name: Deploy to GKE
    needs: build-and-push # Run after successful build and push
    runs-on: ubuntu-latest
    # Only run on pushes to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      contents: 'read'
      id-token: 'write' # Needed for Workload Identity Federation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/918873503816/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-wif-sa@microservice-lab-457503.iam.gserviceaccount.com'

      # Set up gcloud CLI
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet

      # Get GKE credentials
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} --location ${{ env.GKE_LOCATION }}
      # --- : Cấu hình K8s Secret cho DB Password ---
      - name: Configure DB Password Kubernetes Secret
        if: env.DB_PASSWORD_SECRET_MANAGER_ID != '' && env.DB_PASSWORD_K8S_SECRET_NAME != '' # Chỉ chạy nếu có cấu hình
        run: |
          echo "Fetching DB password from Secret Manager: ${{ env.DB_PASSWORD_SECRET_MANAGER_ID }}"
          DB_PASSWORD_VALUE=$(gcloud secrets versions access latest --secret="${{ env.DB_PASSWORD_SECRET_MANAGER_ID }}" --project="${{ env.GCP_PROJECT_ID }}")

          if [ -z "$DB_PASSWORD_VALUE" ]; then
            echo "Error: Failed to retrieve DB password from Secret Manager."
            exit 1
          fi

          echo "Creating/Updating Kubernetes secret '${{ env.DB_PASSWORD_K8S_SECRET_NAME }}' in namespace '${{ env.DEPLOY_NAMESPACE }}'"
          kubectl create secret generic ${{ env.DB_PASSWORD_K8S_SECRET_NAME }} \
            --namespace="${{ env.DEPLOY_NAMESPACE }}" \
            --from-literal=password="${DB_PASSWORD_VALUE}" \
            --dry-run=client -o yaml | kubectl apply -f -
          echo "DB Password Kubernetes Secret configured."

      # Download the image tag artifact
      - name: Download Image Tag Artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          path: ./

      - name: Read Image Tag
        id: image_tag-reader
        run: |
          if [ -f ./image_tag.txt ]; then
            TAG_CONTENT=$(cat ./image_tag.txt)
            echo "Image tag from artifact: [${TAG_CONTENT}]"
            echo "tag=${TAG_CONTENT}" >> $GITHUB_OUTPUT
          else
            echo "Error: image_tag.txt not found after download!"
            exit 1
          fi

      - name: Update Umbrella Chart Values
        run: |
          # Sử dụng yq (cần cài đặt yq trên runner hoặc dùng image có sẵn) hoặc sed
          # Ví dụ với yq (phải có step cài yq trước: - uses: mikefarah/yq@v4)
          yq e '.global.database.connectionName = strenv(DB_CONNECTION_NAME)' -i helm/umbrella-chart/values.yaml
          yq e '.global.podGcpServiceAccountEmail = strenv(POD_GCP_SA_EMAIL)' -i helm/umbrella-chart/values.yaml
          # (Thêm các giá trị khác nếu cần)
          echo "Updated helm/umbrella-chart/values.yaml:"
          cat helm/umbrella-chart/values.yaml
        env:
          DB_CONN_NAME_FOR_YQ: ${{ env.DB_CONNECTION_NAME }}
          POD_SA_EMAIL_FOR_YQ: ${{ env.POD_GCP_SA_EMAIL }}
      # Deploy using the script
      - name: Deploy Application via Helm
        run: |
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh "${{ env.DEPLOY_NAMESPACE }}" "${{ env.HELM_RELEASE_NAME }}" "${{ steps.image_tag_reader.outputs.tag }}"
        shell: bash -eo pipefail {0}
